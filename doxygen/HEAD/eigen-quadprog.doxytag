<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>eigen_quadprog_api.h</name>
    <path>/home/runner/work/eigen-quadprog/eigen-quadprog/src/</path>
    <filename>eigen__quadprog__api_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_QUADPROG_DLLIMPORT</name>
      <anchorfile>eigen__quadprog__api_8h.html</anchorfile>
      <anchor>a4ab92202f9a7824f189014cb881bb2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_QUADPROG_DLLEXPORT</name>
      <anchorfile>eigen__quadprog__api_8h.html</anchorfile>
      <anchor>a93be7b5ce7b375e2ae901c23745b3b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_QUADPROG_API</name>
      <anchorfile>eigen__quadprog__api_8h.html</anchorfile>
      <anchor>a0af7c80014d34bf21d4761e99e292ebd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuadProg.h</name>
    <path>/home/runner/work/eigen-quadprog/eigen-quadprog/src/</path>
    <filename>QuadProg_8h.html</filename>
    <includes id="eigen__quadprog__api_8h" name="eigen_quadprog_api.h" local="yes" imported="no">eigen_quadprog_api.h</includes>
    <class kind="class">Eigen::QuadProgCommon</class>
    <class kind="class">Eigen::QuadProgDense</class>
    <class kind="class">Eigen::QuadProgSparse</class>
    <namespace>Eigen</namespace>
    <member kind="function">
      <type>int</type>
      <name>qpgen1_</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad3bfb7eb46287440d2e75a2396a76c7f</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, const int *iamat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr, double *tol, int *maxiter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>qpgen2_</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a18071e8a41973e397737334385593da4</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr, double *tol, int *maxiter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuadProgCommon</name>
    <filename>classEigen_1_1QuadProgCommon.html</filename>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgCommon</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>ac7a006b9cb25fc5c1fa27d45bb78bdde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EIGEN_QUADPROG_API VectorXi &amp;</type>
      <name>iter</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a47e6434f6bbaa93bc17a5e9912b51777</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API int</type>
      <name>fail</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>ac1ada17582501b660f8d465da97e2cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EIGEN_QUADPROG_API VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a48ad3eec4f3aa486c8b915bca5ff4a23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API int</type>
      <name>maxiter</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a094b6966afd52ca9bcd4e23cdf727734</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>maxiter</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>ad7aaeae1debcef9d303c626a84e6fa73</anchor>
      <arglist>(int maxiter)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API double</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a9dcea86e2f623a5df82d8bc377056493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>ad35589608e541ff5d6fcca50e54b6042</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>problem</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a50ec363cf204e14bd48c5c08fc4c355e</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillQCBf</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>aa6f3d424716b1f2e054ba4d531b4f447</anchor>
      <arglist>(int nreq, int nrineq, const Ref&lt; const MatrixXd &gt; &amp;Q, const Ref&lt; const VectorXd &gt; &amp;C, const Ref&lt; const VectorXd &gt; &amp;Beq, const Ref&lt; const VectorXd &gt; &amp;Bineq, bool isDecomp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixXd</type>
      <name>Q_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>ade6b3b7402c19d572f55a18f79c8d212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>C_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a1bba257a7b60e275170b8161c9f006d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>B_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>ae24d5447291adda64a0041495a39f649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>X_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a1e06bde9844925415c948f37f2825608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fail_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a1d4085fb41d156e4ec64a7ab2a6a608e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXi</type>
      <name>iact_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a38047d0bf3c7714c261ee28ff0dd66c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXi</type>
      <name>iter_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a9ef3ffe3c720df3e70b4beaa9713e132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>work_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a57f15a96f84d1e74303eaa18771dc6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a7363aa4e1cfa960e70996110c12dcec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxiter_</name>
      <anchorfile>classEigen_1_1QuadProgCommon.html</anchorfile>
      <anchor>a37e613dfe2f2bb0e3603536423366b70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuadProgDense</name>
    <filename>classEigen_1_1QuadProgDense.html</filename>
    <base>Eigen::QuadProgCommon</base>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgDense</name>
      <anchorfile>classEigen_1_1QuadProgDense.html</anchorfile>
      <anchor>af69191d271c49086c0e05086f6899c29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgDense</name>
      <anchorfile>classEigen_1_1QuadProgDense.html</anchorfile>
      <anchor>a6395fd3fc28d3bd997e4c9a4a2a17a82</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>problem</name>
      <anchorfile>classEigen_1_1QuadProgDense.html</anchorfile>
      <anchor>a28383450c7cca32223ff02ed0129692d</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API bool</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1QuadProgDense.html</anchorfile>
      <anchor>aabc3ed5167a3fd0f5e75cd5c9ac3fbdd</anchor>
      <arglist>(const Ref&lt; const MatrixXd &gt; &amp;Q, const Ref&lt; const VectorXd &gt; &amp;C, const Ref&lt; const MatrixXd &gt; &amp;Aeq, const Ref&lt; const VectorXd &gt; &amp;Beq, const Ref&lt; const MatrixXd &gt; &amp;Aineq, const Ref&lt; const VectorXd &gt; &amp;Bineq, bool isDecomp=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuadProgSparse</name>
    <filename>classEigen_1_1QuadProgSparse.html</filename>
    <base>Eigen::QuadProgCommon</base>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgSparse</name>
      <anchorfile>classEigen_1_1QuadProgSparse.html</anchorfile>
      <anchor>a20557d201a5862329863f24d13ebea55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgSparse</name>
      <anchorfile>classEigen_1_1QuadProgSparse.html</anchorfile>
      <anchor>afe7edd184831041f1fe7c8f05e984a97</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>problem</name>
      <anchorfile>classEigen_1_1QuadProgSparse.html</anchorfile>
      <anchor>aec7c28073dbc7988f465d198ad8cf56b</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API bool</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1QuadProgSparse.html</anchorfile>
      <anchor>ae82cef5c25505dd4bb70ac19d9835a59</anchor>
      <arglist>(const Ref&lt; const MatrixXd &gt; &amp;Q, const Ref&lt; const VectorXd &gt; &amp;C, const SparseMatrix&lt; double &gt; &amp;Aeq, const Ref&lt; const VectorXd &gt; &amp;Beq, const SparseMatrix&lt; double &gt; &amp;Aineq, const Ref&lt; const VectorXd &gt; &amp;Bineq, bool isDecomp=false)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>namespaceEigen.html</filename>
    <class kind="class">Eigen::QuadProgCommon</class>
    <class kind="class">Eigen::QuadProgDense</class>
    <class kind="class">Eigen::QuadProgSparse</class>
    <member kind="function">
      <type>int</type>
      <name>qpgen1_</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad3bfb7eb46287440d2e75a2396a76c7f</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, const int *iamat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr, double *tol, int *maxiter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>qpgen2_</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a18071e8a41973e397737334385593da4</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr, double *tol, int *maxiter)</arglist>
    </member>
  </compound>
</tagfile>
